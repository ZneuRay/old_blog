
<!DOCTYPE html>
<!--[if IEMobile 7 ]><html class="no-js iem7"><![endif]-->
<!--[if lt IE 9]><html class="no-js lte-ie8"><![endif]-->
<!--[if (gt IE 8)|(gt IEMobile 7)|!(IEMobile)|!(IE)]><!--><html class="no-js" lang="en"><!--<![endif]-->
<head>
  <meta charset="utf-8">
  <title>Category: blog - 用嘴寫code</title>
  <meta name="author" content="Ray">

  
  <meta name="description" content="Category: blog">
  <meta name="keywords" content="Swift, iOS developer, Ruby, Ruby On Rails, programming, coding, Octopress, 用嘴寫code">

  <!-- http://t.co/dKP3o1e -->
  <meta name="HandheldFriendly" content="True">
  <meta name="MobileOptimized" content="320">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  
  <link rel="canonical" href="http://zneuray.github.io/blog/categories/blog/atom.xml">
  <link href="/favicon.png" rel="icon">
  <link href="/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css">
   <link href="/stylesheets/data-table.css" media="screen, projection" rel="stylesheet" type="text/css" />
  <script src="/javascripts/modernizr-2.0.js"></script>
  <script src="/javascripts/ender.js"></script>
  <script src="/javascripts/octopress.js" type="text/javascript"></script>
  <link href="/atom.xml" rel="alternate" title="用嘴寫code" type="application/atom+xml">
  <link href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css" rel="stylesheet">

<!--Fonts from Google"s Web font directory at http://google.com/webfonts -->
<link href='http://fonts.googleapis.com/css?family=Lato:400,100,100italic,300,300italic,400italic,700,700italic,900,900italic' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Lora:400,400italic,700,700italic' rel='stylesheet' type='text/css'>
<link href='http://fonts.googleapis.com/css?family=Source+Code+Pro:200,300,400,500,600,700,900' rel='stylesheet' type='text/css'>




  
  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-63488741-2']);
    _gaq.push(['_trackPageview']);

    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>


  <style>html{background: url(/images/background.png) no-repeat center center fixed;-webkit-background-size: cover;-moz-background-size: cover;-o-background-size: cover;background-size: cover;}</style>
</head>

<body   >
  <header role="banner"><hgroup>
</hgroup>

</header>
  <div id="main">
    <div id="content">
      <?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blog | 用嘴寫code]]></title>
  <link href="http://zneuray.github.io/blog/categories/blog/atom.xml" rel="self"/>
  <link href="http://zneuray.github.io/"/>
  <updated>2016-02-21T18:30:58+08:00</updated>
  <id>http://zneuray.github.io/</id>
  <author>
    <name><![CDATA[Ray]]></name>
    <email><![CDATA[ray9015@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress + Github 打造自已的Blog]]></title>
    <link href="http://zneuray.github.io/2016/01/07/octopress-plus-github-da-zao-zi-yi-de-blog/"/>
    <updated>2016-01-07T18:28:26+08:00</updated>
    <id>http://zneuray.github.io/2016/01/07/octopress-plus-github-da-zao-zi-yi-de-blog</id>
    <content type="html"><![CDATA[<h1>部落格誕生</h1>

<p>一直以來都沒有寫作的習慣，最近深刻的體會到任何事情當下都覺得這麼印象深刻，怎麼可能會忘記呢？結果只過了一個禮拜就想不起來…真的事情不寫下來非常容易忘記，因此起了念頭，把學習的心得都寫下來吧！也正好最近開始學習Swift，就找個部落格來記錄學習的心得。</p>

<!-- more -->


<p>因為想要記錄Swift的學習心得，需求的部份希望能支援Swift syntax highlighting，介面要簡潔，這樣就足夠了，於是尋找的過程中看了一些部落格，大部份拿來寫遊記、食記等的部落格就不提了，以下列出幾個我有考慮使用的Blog :</p>

<ul>
<li><a href="https://www.blogger.com">Blogger</a></li>
<li><a href="https://tw.wordpress.org/">WordPress</a></li>
<li><a href="https://github.com/tryghost/Ghost">Ghost</a></li>
<li><a href="http://logdown.com/">Logdown</a></li>
<li><a href="http://octopress.org/">Octopress</a></li>
</ul>


<p>最後我選擇了使用<strong>Octopress</strong>，下面來簡單介紹一下每個Blog</p>

<h3>Blogger</h3>

<p>這是Google自已的Blog，有Google帳號就可以登入使用，但介面與操作我不太喜歡，而且沒有能放code的區塊，要自已進html加上css與javascript才會有syntax highlighting的功能，非常不方便，所以沒有使用。</p>

<h3>WordPress</h3>

<p>一個open source的blog，功能非常強大，只要找一台Server就可架設，現在又有很多租用的Server都直接支援架設WordPress，WordPress自已本身也提供線上免費版，其實非常夠用了，原本打算就直接使用WordPress，但是發現免費版的目前並不支援Swift syntax highlighting(支援的語言請<a href="https://en.support.wordpress.com/code/posting-source-code/">參考</a>)，也無法安裝外掛，所以先擺著看看還有沒有其他的Blog。</p>

<h3>Ghost</h3>

<p>同樣是open source的blog，架構使用node.js，目的就是為了簡潔快速，畫面還滿漂亮，並且使用<strong>Markdown</strong>來編輯，當時有心動打算使用，但想到要找台nodejs的Server較麻煩，目前也不打算自已架Server，所以也先擺著。</p>

<blockquote><h4>Markdown簡介</h4>

<p><a href="http://markdown.tw/">Markdown</a>是一種易讀易寫的格式，用一些簡單的符號就可以進行整篇文章的排版，像現在看到的這篇文章就是使用Markdown格式寫成的，Markdown原本就支援code block，再加上Github以Markdown設計出<a href="https://help.github.com/articles/github-flavored-markdown/">GitHub Flavored Markdown</a>，支援了大部份語言的syntax highlighting，當初希望在記錄Swift學習心得時能有個漂亮的顏色顯示，所以選擇了有支援Markdown的Blog。</p></blockquote>

<pre><code class="swift">var name: String = "Ray"

func sayHello(to person: String) -&gt; Void {
    print("Hello \(person)")
}

sayHello(to: name) // "Hello Ray"
</code></pre>

<h3>Logdown</h3>

<p>由XDite的團隊設計，目的就是要能方便貼code、貼圖等，專門設計給程式設計師的Blog，當時其實已經在安裝Octopress，過程中不小心看到的，試用了一下覺得還算不錯，同樣使用Markdown編輯，畫面清析簡單，也提供免費版，對程式設計師又不想自已架設Blog的人非常推薦使用。</p>

<h3>Octopress</h3>

<p>這就今天的主角，一個畫面功能簡潔，也同樣是以Markdown來編輯的Blog，並且搭配Github pages就可以架設，整個Blog也可自行修改客製，因此最後選擇了Octopress。</p>

<p>因為Octopress安裝架設會需要一點技術知識背景，也沒有提供後台管理，發佈文章更改設定等都需要自己手動修改產生，新手的話就需要多花點時間努力學習，懶人的話推薦去使用Logdown就非常好用了。</p>

<h1>開始安裝</h1>

<p>安裝大致上就參考官網所寫的<a href="http://octopress.org/docs/setup/">文件</a>
步驟為以下所列 :</p>

<ol>
<li>Github帳號並設定Github pages</li>
<li>Ruby與Javascript環境</li>
<li>安裝Octopress</li>
</ol>


<h3>Github</h3>

<p>先去<a href="https://github.com/">Github</a>辦個帳號，接著建立Github pages(<a href="https://pages.github.com/">官網</a>)，但不要照著官網做，我們只需要新增一個repository並取名為 :</p>

<p><strong><code>username.github.io</code></strong></p>

<p><strong>username</strong> 是你的帳號，全小寫就好，千萬不要跟著打username上去，像我的帳號是zneuray，就打<code>zneuray.github.io</code>，這也是你網站的位置，建好後你就擁有一個基本的網站了。</p>

<h3>Ruby</h3>

<p><code>OS X 10.11</code>內建就有<code>Ruby-2.0.0</code>，目前Octopress僅需要<code>1.9.3</code>以上的版本即可，可以直接略過這步</p>

<p>因為最新版本的<code>Ruby-2.3.0</code>，如果想更新的再照以下方式安裝，我的<code>Ruby</code>環境已經安裝好了，沒辦法再實際安裝一次，因此這邊就參考其他<a href="http://railsapps.github.io/installrubyonrails-mac.html">網站</a>安裝教學，簡單列一下更新步驟</p>

<p>安裝環境 : <code>OS X 10.11</code></p>

<pre><code class="sh">1. 安裝homebrew
$ ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

2. 安裝gpg
$ brew install gpg
$ command curl -sSL https://rvm.io/mpapis.asc | gpg --import -

3.1 安裝rvm
$ \curl -L https://get.rvm.io | bash -s stable
$ source ~/.rvm/scripts/rvm

3.2 已經有安裝rvm的可以用以下指令取得最新版rvm
$ rvm get stable --autolibs=enable

4. 安裝最新版ruby
$ rvm install ruby-2.3.0
</code></pre>

<h3>Octopress</h3>

<p>接下來就開始安裝Octopress，在console使用git將整個repository下載回來，最後面octopress為下載的資料夾，可自行更換</p>

<pre><code class="sh">$ git clone git://github.com/imathis/octopress.git octopress
</code></pre>

<blockquote><p>另外推薦圖型化介面的git管理套件 <a href="https://www.sourcetreeapp.com/">SourceTree</a></p></blockquote>

<p>進入資料夾octopress</p>

<pre><code class="sh">$ cd octopress
</code></pre>

<p>接下來要安裝相依套件，這部份是屬於<code>Ruby</code>環境建置的一部份，在這之前你應該先安裝好<code>Ruby</code>，<code>Ruby</code>的套件管理程式有<code>RVM</code>與<code>rbenv</code>，本篇文章以<code>RVM</code>為主</p>

<pre><code class="sh">$ gem install bundler
$ bundle install
</code></pre>

<blockquote><p>如果使用rbenv記得要在每次執行<code>gem install</code>後使用<code>rbenv rehash</code>重新整理一次</p></blockquote>

<p>安裝Octopress，這邊的安裝其實就是安裝你的theme，後面沒加參數就是使用預設的theme，theme的部份後面會介紹，先讓我們安裝完</p>

<pre><code class="sh">$ rake install
</code></pre>

<p>從這邊我們可以看到安裝就是從theme的資料夾中把source跟sass複製到你的Blog資料夾，source裡面就是如何產生你的Blog頁面資料，就是產生html部份，sass則是產生Blog樣式，也就是產生css，只要會修改這邊就可以自行設計樣式</p>

<blockquote><p>## Copying classic theme into ./source and ./sass<br/>
mkdir -p source<br/>
cp -r .themes/classic/source/. source<br/>
mkdir -p sass<br/>
cp -r .themes/classic/sass/. sass<br/>
mkdir -p source/_posts<br/>
mkdir -p public</p></blockquote>

<p>再來要設定Blog環境</p>

<pre><code class="sh">$ rake setup_github_pages
</code></pre>

<blockquote><p>Enter the read/write url for your repository<br/>
(For example, &lsquo;git@github.com:your_username/your_username.github.io.git) or '<a href="https://github.com/your_username/your_username.github.io">https://github.com/your_username/your_username.github.io</a>&rsquo;)<br/>
Repository url:</p></blockquote>

<p>輸入你的Github pages網址，username記得要換成你的帳號</p>

<pre><code>https://github.com/username/username.github.io
</code></pre>

<p>這裡會自動幫你把repository remote設到你輸入的github repository，並幫你新增一個branch叫<code>source</code>，未來檔案都在<code>source</code>這個branch修改，要發表新文章也同樣是在這</p>

<p>下一步就是產生網頁並發佈，<code>source</code>裡的檔案都是含程式碼的原始檔，包含新發表的Markdown文章也同樣是放在這邊，這一步就是把這些檔案全部轉成html放到<code>_deploy</code>資料夾中，並使用<code>deploy</code>指令幫你把<code>_deploy</code>資料夾中的檔案push到remote</p>

<pre><code class="sh">$ rake generate
$ rake deploy
</code></pre>

<p>到這邊Octopress安裝就算完成了，可以看到目前會有2個branch，分別為<code>source</code>與<code>master</code>，之後都只要修改<code>source</code> branch就好，<code>master</code>交給rake來管理就好了，記得<code>source</code>有修改過的部份再<code>commit</code>上去就可以。</p>

<pre><code class="sh">$ git add .
$ git commit -m 'your message'
$ git push origin source
</code></pre>

<h1>目錄結構</h1>

<p>簡單列出幾個比較需要知道的目錄</p>

<pre><code class="ruby">octopress
+-- .themes #theme都放這邊
+-- _deploy #執行rake generate後產生的檔案放到這，也就是要上傳的完稿，使用rake deploy上傳至github pages
+-- sass #Blog樣式
+-- source
|   +-- _includes #其他附加的原始html
|   +-- _layouts #幾個主頁面的原始html
|   +-- _posts #文章存放的地方
|   +-- about #自我介紹存放的地方
|   +-- images #存放圖片的地方
+-- _config.yml #Octopress主要的設定檔
</code></pre>

<h1>Blog設定</h1>

<p>首先我們需要來設定Blog的資訊，主要的設定都在<code>_config.yml</code>，這是<code>yaml</code>格式的檔案，基本格式就是<code>設定名稱: 設定值</code>，非常容易就可以修改，檔案中還有其他設定再依自已需求調整即可，這裡列出最基本的Blog資訊</p>

<pre><code class="yaml">url: "http://zneuray.github.io"
title: "用嘴寫code"
subtitle: "說的一口好程式"
author: "Ray"
simple_search: "https://www.google.com/search"
description: "Android app / Ruby / Rails web developer"
</code></pre>

<h1>發表新文章</h1>

<p>發表新文章非常簡單，只要輸入以下指令，<code>title</code>輸入文章的標題就可以</p>

<pre><code class="sh">$ rake new_post["title"]
</code></pre>

<blockquote><p>如果你使用的是zsh，因為[ ]在zsh中有另外的作用，所以這行指令會無法執行，要改用以下方式輸入</p></blockquote>

<pre><code class="sh">$ rake "new_post[title]"
或
$ rake new_post\["title"\]
</code></pre>

<p>執行完後會在<code>source/_posts/</code>底下產生一個新的檔案，格式是<code>年-月-日-標題.markdown</code>，這就是剛建立的新文章，直接用編輯器打開來編輯就可以了。</p>

<p>打開新建立的文章會看到裡面已經預先幫我們填好一些資訊</p>

<pre><code class="yaml">---
layout: "post"
title: "Octopress + Github 打造自已的Blog"
date: "2016-01-07 18:28:26 +0800"
comments: true
categories: "Octopress"
published: true
---
</code></pre>

<ul>
<li>layout: 指定使用哪個layout，這裡寫<code>post</code>意思就是對應到<code>source/_layouts/post.html</code>這個layout</li>
<li>title: 文章標題</li>
<li>date: 文章日期</li>
<li>comments: 允不允許留言</li>
<li>categories: 會自動幫你產生文章分類</li>
<li>published: 如果不想發佈這篇文章時可設定成false</li>
</ul>


<p>編輯完的文章在Blog主頁面會直接看到整篇文章，如果文章多的話會造成整個主頁面非常的長，也不方便找文章，因此我們在文章寫完一段<code>前言</code>時加上一行語法</p>

<p>```html</p>

<!-- more -->


<pre><code>
在這行語法後的文章就不會出現在主頁面，而會顯示一個`更多`的按鈕讓你點入觀看文章，這樣就可以整理好主頁的版面，這串語法是在`_config.yml`中設定的，如果發現語法沒效果請檢查你的`_config.yml`是否有做修改

### 本篇文章編輯的範例
<img src="/images/blog/48cd89ea8b201ee0e5fd/5f88861b8fc71281dec0d33b481d2bd4b43c988f.png">

### 預覽
寫文章時我們當然想看一下目前編輯出來的文章到底長什麼樣子，`Octopress`也提供了預覽的指令
</code></pre>

<p>$ rake preview
```</p>

<blockquote><p>Starting to watch source with Jekyll and Compass. Starting Rack on port 4000<br/>
[2016-01-07 23:28:45] INFO  WEBrick 1.3.1<br/>
[2016-01-07 23:28:45] INFO  ruby 2.2.1 (2015-02-26) [x86_64-darwin14]<br/>
[2016-01-07 23:28:45] INFO  WEBrick::HTTPServer#start: pid=39559 port=4000</p></blockquote>

<p>輸入指令後就我們就可以看到<code>Octopress</code>自動執行<code>rake generate</code>後幫我們啟動了一個<code>web server</code>並開啟<code>port 4000</code>讓我們可以連線進入，接下來打開你的瀏覽器並輸入網址<a href="http://127.0.0.1:4000">127.0.0.1:4000</a>，就可以預覽你目前的Blog，這個方式會佔用一個terminal，在預覽完後按<code>ctrl + c</code>關閉才可以繼續使用該terminal。</p>

<h3>pow</h3>

<p>另外推薦一個簡單的web server套件<a href="http://pow.cx/">pow</a>，在寫RoR時因為常常要預覽網頁，但每次都要啟動關閉server實在很麻煩，因此安裝<code>pow</code>，<code>pow</code>會根據目前專案的設定來啟動一個server，除非有更改到設定的部份才需要重啟，不然就從此放著不管他就可以了。</p>

<p>安裝<code>pow</code>非常簡單，只需要一行指令，就可以完成安裝</p>

<pre><code class="sh">$ curl get.pow.cx | sh
</code></pre>

<p>接下來設定你的專案，<code>/path/to/octopress</code>的部份換成你的Blog的路徑</p>

<pre><code class="sh">$ cd ~/.pow
$ ln -s /path/to/octopress octopress
</code></pre>

<p>完成後未來只要開啟<code>專案名.dev</code>的網址就可以看到你的Blog，如果專案名是octopress，那就開啟<a href="http://octopress.dev/">octopress.dev</a>網址，記得每次編輯完還是要下<code>rake generate</code>才會更新你的Blog</p>

<p>如果你使用<code>pow</code>的話，有一個<code>pow</code>的管理套件叫做<code>powder</code>，讓你可以更方便的管理<code>pow</code>，安裝的方式如下</p>

<pre><code class="sh">$ gem install powder
</code></pre>

<p>安裝了<code>powder</code>後就不需要再使用上面的方式設定Blog，只要進入你的Blog資料夾輸入指令，就會自動幫你設定Blog</p>

<pre><code class="sh">$ powder link
</code></pre>

<p>其他<code>powder</code>指令</p>

<pre><code class="sh">$ powder start #啟動pow
$ powder restart #重新啟動pow
$ powder stop #停止pow
$ powder unlink #解除專案連結
$ powder open #自動使用瀏覽器開啟專案的網址
</code></pre>

<h3>Octopress theme</h3>

<p>Octopress theme的安裝非常簡單，在Octopress的<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">Wiki</a>上已經收集了不少的theme，選擇你想要安裝的theme進入他的github，把theme使用git clone到你<code>.theme</code>的目錄再安裝就好了，每個theme也都有教你安裝方式，除了有些theme有另外增加新功能需要你去設定外，大致上都差不多</p>

<p>以本站來說，選擇的是<a href="https://github.com/bijumon/oct2">Oct2</a>這個theme，下面範例就使用這個theme來做安裝，選擇其他theme的記得要換掉網址，不要造著輸入</p>

<pre><code class="sh">$ git clone https://github.com/bijumon/oct2.git .themes/
$ rake install["oct2"]
# 記得像zsh的話需要使用 rake "install[oct2]"
$ rake generate
</code></pre>

<p>這樣我們就完成theme的安裝並產生新的Blog了，這邊可以下rake install[&ldquo;oct2&rdquo;]是因為我們把oct2的source放到<code>.theme</code>底下了，看一下<code>.theme</code>的資料夾發現裡面還有一個classic，這個就是原始octopress的theme，所以想換回來的話只要<code>rake install["classic"]</code>就可以了</p>

<h3>增加留言功能</h3>

<p>想要增加留言功能的話我們直接使用<code>Octopress</code>支援的<a href="https://disqus.com">Disqus</a>就好了，<code>Disqus</code>是一套整合的留言版管理系統，幫你整合各大社群登入與留言，安裝也非常快速簡單。</p>

<p>要在<code>Octopress</code>上使用<code>Disqus</code>，需要先到<code>Disqus</code>官網註冊一組帳號才行</p>

<ol>
<li>首先開啟文章支援留言的功能，在文章的最上方將<code>comments</code>設定為<code>true</code>，代表本篇文章開啟留言，不想開留言的文章設定為<code>false</code>即可</li>
<li>進入<a href="https://disqus.com">Disqus</a>註冊一個帳號</li>
<li>回到首頁看到右上角有個齒輪點擊選擇<code>Add Disqus To Site</code></li>
<li>按下Start Using Engage</li>
<li>輸入你的Blog網址並取一個唯一的名稱設定<code>Disqus</code>網址，你設定的這組唯一的名稱叫做<code>shortname</code>(不包含<code>.disqus.com</code>)，未來這組<code>shortname.disqus.com</code>就是你留言版的網址</li>
<li>回到Blog開啟<code>_config.yml</code>找到下面這一行填入你的shortname
<code>yaml
disqus_short_name:
</code></li>
<li>重新產生Blog並發佈
<code>sh
$ rake generate
$ rake deploy
</code></li>
</ol>


<p>這樣你的Blog就新增了留言的功能</p>

<h1>恭喜</h1>

<p>順利安裝完<code>Octopress</code>後就代表你已經擁有一個自已的Blog了，現在我也是剛裝好<code>Octopress</code>開始使用，還有非常多的功能目前我也還沒使用到，未來在寫新文章的過程有用到新的功能時再更新上來吧。</p>
]]></content>
  </entry>
  
</feed>

    </div>
  </div>
  <footer role="contentinfo"><p>
  Copyright &copy; 2016 - Ray -
  <span class="credit">Powered by <a href="http://octopress.org">Octopress</a></span>
</p>

</footer>
  

<script type="text/javascript">
      var disqus_shortname = 'zneuray';
      
        
        var disqus_script = 'count.js';
      
    (function () {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = 'http://' + disqus_shortname + '.disqus.com/' + disqus_script;
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    }());
</script>



<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) {return;}
  js = d.createElement(s); js.id = id;
  js.src = "//connect.facebook.net/en_US/all.js#appId=212934732101925&xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>









</body>
</html>
