<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[用嘴寫code]]></title>
  <link href="http://zneuray.github.io/atom.xml" rel="self"/>
  <link href="http://zneuray.github.io/"/>
  <updated>2016-02-21T18:30:58+08:00</updated>
  <id>http://zneuray.github.io/</id>
  <author>
    <name><![CDATA[Ray]]></name>
    <email><![CDATA[ray9015@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Swift學習 - 基礎篇]]></title>
    <link href="http://zneuray.github.io/2016/01/25/swiftxue-xi-ji-chu-pian/"/>
    <updated>2016-01-25T01:36:02+08:00</updated>
    <id>http://zneuray.github.io/2016/01/25/swiftxue-xi-ji-chu-pian</id>
    <content type="html"><![CDATA[<p>本篇範例請參考<a href="https://github.com/ZneuRay/iOS-Tutorial/blob/master/Basic.playground/Contents.swift">Basic playground</a></p>

<p>Swift是一個安全型別(type-safe)的語言，意思是說Swift會幫助你判別值的型別是什麼，例如說目前值所屬的型別是<code>String</code>，那麼Swift就會預防你不小心給予它<code>Int</code>的值，這可以幫助你在開發的過程中即時發現錯誤並修正。</p>

<h1>常數(Constants)與變數(Variables)</h1>

<p>在程式中我們常常會需要記錄一些內容，例如一組字串(String)<strong><code>"Hello"</code></strong>或一個整數(Int)<strong><code>10</code></strong>，這些內容稱為值(value)，而我們會使用一組名稱來記錄這些值，稱為<code>常數</code>或<code>變數</code>，常數與變數的差別在於常數在第一次給予值後就無法再變更他的值了，而變數則可任意變更。</p>

<!-- more -->


<h1>宣告常數與變數</h1>

<p>所有的常數與變數在使用前都必須先宣告，讓程式知道你將要使用這個變數，常數使用<code>let</code>，變數使用<code>var</code>來宣告，而宣告的常數或變數名稱盡量要好讀為主，避免忘了自已當時到底想描述什麼，以下示範一個追縱登入次數限制的範例 :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">pi</span> <span class="o">=</span> <span class="mf">3.14159</span>
</span><span class='line'><span class="k">var</span> <span class="n">radius</span> <span class="o">=</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>這裡宣告一個常數<code>pi</code>，也就是圓周率<code>π</code>，與一個變數<code>radius</code>，因為圓周率的值是不會改變的，所以很適合宣告為常數，同時也可以避免不小心修改到<code>pi</code>的值造成計算的結果不正確</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">pi</span> <span class="o">=</span> <span class="mf">2.5</span> <span class="c1">//這行會編譯錯誤</span>
</span><span class='line'><span class="n">radius</span> <span class="o">=</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>在宣告多個常數或變數時也可以簡寫在一行，只要使用<code>,</code>分隔即可</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">x</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mf">2.0</span>
</span></code></pre></td></tr></table></div></figure>


<h1>型別標注(Type Annotation)</h1>

<p>儲存的值會有各種不同的型別存在，為了清楚的說明該常數或變數可儲存的值是什麼型別，我們可以加上型別標注，以下我們宣告一個儲存字串的變數，為給予一組字串</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">welcomeMessage</span><span class="p">:</span> <span class="n">String</span>
</span><span class='line'><span class="n">welcomeMessage</span> <span class="o">=</span> <span class="s">&quot;Hello&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>宣告相同型別時也可簡寫在一行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="n">red</span><span class="p">,</span> <span class="n">green</span><span class="p">,</span> <span class="nl">blue</span><span class="p">:</span> <span class="n">Double</span>
</span></code></pre></td></tr></table></div></figure>


<p>Swift有強力的型別推斷，在宣告時有給予初始值時Swift就可以自動推斷型別，因此可以省略型別標注</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">dog</span> <span class="o">=</span> <span class="s">&quot;狗&quot;</span>
</span><span class='line'><span class="c1">//或</span>
</span><span class='line'><span class="k">let</span> <span class="nl">cat</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;貓&quot;</span>
</span><span class='line'><span class="c1">//都是宣告一組字串常數</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">bird</span> <span class="c1">//這行會編釋錯誤</span>
</span></code></pre></td></tr></table></div></figure>


<h1>註解(Comments)</h1>

<p>註解是用在幫程式碼加上備註，讓程式碼更容易讀懂，也能幫助你未來再回來看程式碼時可透過註解馬上理解當初寫這些程式的用途是什麼，註解有兩種方式，分別是單行註解<code>//</code>與區塊註解<code>/* */</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// this is a comment</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* this is also a comment,</span>
</span><span class='line'><span class="cm">but written over multiple lines */</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* this is the start of the first multiline comment</span>
</span><span class='line'><span class="cm">/* this is the second, nested multiline comment */</span>
</span><span class='line'><span class="n">this</span> <span class="kt">is</span> <span class="n">the</span> <span class="n">end</span> <span class="n">of</span> <span class="n">the</span> <span class="n">first</span> <span class="n">multiline</span> <span class="n">comment</span> <span class="err">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>Swift的註解支援巢狀(nested)註解，這在做些測試的時後非常好用，目前多數常見的語言都不支援，算是比較特別的地方</p>

<h1>常數與變數命名方式</h1>

<p>常數與變數的命名方式主要是英文為主，大小寫皆可，雖然也支援unicode，但不太建議使用，因為這反而會讓你的程式碼更難維護</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="err">π</span> <span class="o">=</span> <span class="mf">3.14159</span>
</span><span class='line'><span class="k">let</span> <span class="err">你好</span> <span class="o">=</span> <span class="s">&quot;你好世界&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="err">🐶🐮</span> <span class="o">=</span> <span class="s">&quot;dogcow&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>命名常數與變數時不可包含空白、特殊符號等，命名可包含數字，但數字不可以在字首</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="c1">// 錯誤的命名方式</span>
</span><span class='line'><span class="k">let</span> <span class="err">↓</span> <span class="o">=</span> <span class="s">&quot;down arrow&quot;</span> <span class="c1">// 特殊符號</span>
</span><span class='line'><span class="k">let</span> <span class="mi">1</span><span class="n">string</span> <span class="o">=</span> <span class="s">&quot;one&quot;</span> <span class="c1">// 數字不可在字首</span>
</span><span class='line'><span class="k">let</span> <span class="n">say</span> <span class="n">hello</span> <span class="o">=</span> <span class="s">&quot;hello&quot;</span> <span class="c1">// 不可有空白</span>
</span><span class='line'><span class="k">let</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;a string&quot;</span> <span class="c1">// String是保留字</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 正確的命名方式</span>
</span><span class='line'><span class="k">let</span> <span class="n">string_1</span> <span class="o">=</span> <span class="s">&quot;string one&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="n">thisIsAPen</span> <span class="o">=</span> <span class="s">&quot;這是一隻筆&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外還有保留字，也就是Swift的語法會中使用到的字，例如<code>Int</code>、<code>if</code>、<code>class</code>等，雖然只要在前後加上<code>`</code>可以用來命名，但可能會造成混亂，應盡量避免使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="err">`</span><span class="k">class</span><span class="err">`</span> <span class="o">=</span> <span class="s">&quot;Hello&quot;</span>
</span><span class='line'><span class="err">`</span><span class="k">class</span><span class="err">`</span> <span class="o">=</span> <span class="s">&quot;Hi&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>class為類別的型別標注，在這裡使用class來命名雖然可行，但後面在撰寫程式時可能造成搞不清楚這是變數還是類別，容易造成混亂</p>

<h1>印出常數與變數</h1>

<p>以上我們宣告了一堆常數與變數，接下來就要把裡面的值印出來看看，這裡使用print()就可以把值印在xcode的console上，print()的完整定義是<code>print(_:separator:terminator:)</code>，這表示print()這個涵式(function)可以傳入3個參數，在後面的章節會再詳細介紹，現在我們先來把值印出看看</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">welcomeMessage</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;welcomeMessage Ray&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;\(welcomeMessage) Ray&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>單純只要印出變數或常數的話直接放入print()中就可以，要印出字串也可直接將字串放入，如果要在字串中使用常數或變數則需要使用<code>\(常數或變數)</code>，Swift在字串中遇到這種格式就會自動以正確的值來替換</p>

<h1>分號(Semicolons)</h1>

<p>在大部份程式語言中都會要求程式的每段陳述(statment)都要以<code>;</code>結尾，在Swift中則不需要，不過加上也不影響，但如果想要在一行中寫出超過一段的陳述就需要加上<code>;</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">apple</span> <span class="o">=</span> <span class="s">&quot;蘋果&quot;</span><span class="p">;</span> <span class="n">print</span><span class="p">(</span><span class="n">apple</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h1>整數(Integers)</h1>

<p>整數有有號(signed)與無號(unsigned)，有號整數包含正負數與0，無號整數只有正數與0，宣告有號整數使用<code>Int</code>，無號整數使用<code>UInt</code>，另外Swift也提供8、16、32和64 bits的整數型別，分別在<code>Int</code>後方加上對應的bit數即可，如<code>Int8</code>，無號的如<code>UInt16</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">Int8</span><span class="p">.</span><span class="n">min</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">Int8</span><span class="p">.</span><span class="n">max</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="kt">UInt8</span><span class="p">.</span><span class="n">min</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="kt">UInt8</span><span class="p">.</span><span class="n">max</span><span class="p">)</span>
</span><span class='line'><span class="c1">//let cannotBeNegative: UInt8 = -1</span>
</span><span class='line'><span class="c1">//let tooBig: Int8 = 256</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">Int16</span><span class="p">(</span><span class="mi">1234</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>一般來說使用<code>Int</code>就足夠了，Swift會自動依目前裝置支援32或64-bit自動調整，32-bit的整數範圍為 -2,147,483,648 與 2,147,483,647，已經足夠應付大部份的程式</p>

<h1>浮點數(Floating Point)</h1>

<p>浮點數指的是包含小數點的數，如<code>3.14159</code>，浮點數則提供了32與64 bits的型別，分別為<code>Float</code>與<code>Double</code>，精準度則為6位與15位的小數，在沒有特殊情況的考量下一般建議使用<code>Double</code>即可，Swift的型別推斷也是以<code>Double</code>為主，下面我們印出前面已宣告常數pi的型別，可知道Swift自動推斷型別為<code>Double</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">print</span><span class="p">(</span><span class="n">pi</span><span class="p">.</span><span class="kt">dynamicType</span><span class="p">)</span> <span class="c1">// Double</span>
</span></code></pre></td></tr></table></div></figure>


<h1>布林值(Booleans)</h1>

<p>布林值是一種用於邏輯判斷的值，僅能儲存<code>true</code>與<code>false</code>，要宣告一個布林值使用<code>Bool</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="nl">myNameIsRay</span><span class="p">:</span> <span class="n">Bool</span> <span class="o">=</span> <span class="nb">true</span>
</span><span class='line'><span class="k">let</span> <span class="nl">theLanguageIsRuby</span><span class="p">:</span> <span class="n">Bool</span> <span class="o">=</span> <span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>由於swift的型別安全機制，swift的布林值與大多數語言不同，<code>true</code>的值並非等於<code>1</code>，<code>false</code>也不等於<code>0</code>，這在使用條件判斷式如<code>if</code>時要特別注意，避免出錯</p>

<h1>數值字面(Numeric Literals)</h1>

<p>整數中有2、8、10和16進位數值，一般我們常使用的是10進位，在Swift中可以使用前綴字的方式表示不同進位數值 :</p>

<ul>
<li>10進位(Decimal) : 無</li>
<li>2進位(Binary) : 0b</li>
<li>8進位(Octal) : 0o</li>
<li>16進位(Hexadecimal) : 0x</li>
</ul>


<p>以下4行程式碼以不同的進位方式表示數字<code>12</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">decimalInteger</span> <span class="o">=</span> <span class="mi">12</span>
</span><span class='line'><span class="k">let</span> <span class="n">binaryInteger</span> <span class="o">=</span> <span class="mi">0</span><span class="n">b1100</span>
</span><span class='line'><span class="k">let</span> <span class="n">octalInteger</span> <span class="o">=</span> <span class="mi">0</span><span class="n">o14</span>
</span><span class='line'><span class="k">let</span> <span class="n">hexadecimalInteger</span> <span class="o">=</span> <span class="mh">0xA</span>
</span></code></pre></td></tr></table></div></figure>


<p>浮點數中並沒有2與8進位的表示方式，但指數(exponent)部份是屬於浮點數，加上數值字面來表示</p>

<ul>
<li>10進位字面為<code>e</code>，表示基數乘與10的<code>e</code>次方

<ul>
<li>1.25e2 = 1.25 x 10<sup>2</sup> = 125.0</li>
<li>1.25e-2 = 1.25 x 10^-2 = 0.0125</li>
</ul>
</li>
<li>16進位字面為<code>p</code>，表示基數乘與2的<code>p</code>次方

<ul>
<li>0xFp2 = 15 x 2<sup>2</sup> = 60.0</li>
<li>0xFp-2 = 15 x 2<sup>2</sup> = 3.75</li>
</ul>
</li>
</ul>


<p>以下3行同樣表示12.1875</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">decimalDouble</span> <span class="o">=</span> <span class="mf">12.1875</span>
</span><span class='line'><span class="k">let</span> <span class="n">exponentDouble</span> <span class="o">=</span> <span class="mf">1.21875e1</span>
</span><span class='line'><span class="k">let</span> <span class="n">hexadecimalDouble</span> <span class="o">=</span> <span class="mh">0xC</span><span class="mf">.3</span><span class="n">p0</span>
</span></code></pre></td></tr></table></div></figure>


<p>數值字面還可以包含額外的<code>0</code>與<code>_</code>讓數字更容易讀</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">paddedDouble</span> <span class="o">=</span> <span class="mf">000123.456</span>
</span><span class='line'><span class="k">let</span> <span class="n">oneMillion</span> <span class="o">=</span> <span class="mi">1</span><span class="n">_000_000</span>
</span><span class='line'><span class="k">let</span> <span class="n">justOverOneMillion</span> <span class="o">=</span> <span class="mi">1</span><span class="n">_000_000</span><span class="mf">.000</span><span class="n">_000_1</span>
</span></code></pre></td></tr></table></div></figure>


<h1>字串(String)</h1>

<p>字串就是一串文字，必須需用雙引號<code>"</code>包起來</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">myName</span> <span class="o">=</span> <span class="s">&quot;Ray&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>空值(nil)</h1>

<p>在一般的程式語言中，<code>nil</code>(有些語言使用<code>null</code>)表示一個常數或變數為空的值，而讀取一個為nil的常數或變數就會造成程式錯誤(但可以用條件來判斷是否為nil)，因為不存在任何值，在Swift中因為有安全性的機制，並無法像一般語言直接將nil給予常數或變數，需要搭配Optional使用，這也幫助了開發者減少一些不可預期的錯誤</p>

<h1>型別別名(Type Alias)</h1>

<p>使用關鍵字<code>typealias</code>可以幫型別取別名來代替</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">typealias</span> <span class="n">number</span> <span class="o">=</span> <span class="n">Int</span>
</span><span class='line'><span class="k">let</span> <span class="nl">ten</span><span class="p">:</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<h1>元組(Tuples)</h1>

<p>Tuple可將多個值組合成群組形成一個值，如:<code>(123, "123", 1.23)</code>，在tuple中可放入任何型態的值，以下我們來練習建立一個iPhone的規格與價錢tuple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">iPhone6s</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;16g&quot;</span><span class="p">,</span> <span class="mi">24500</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我們可以另外宣告其它常數或變數來對應tuple</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="n">price</span><span class="p">)</span> <span class="o">=</span> <span class="n">iPhone6s</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;Pricing of iPhone6s \(type) is $\(price)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>一般來說有幾個值在tuple內就需要相同數目的常數或變數來對應，但有些時後並不是每個值都需要，這裡可以使用<code>_</code>來略過對應的值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">price2</span><span class="p">)</span> <span class="o">=</span> <span class="n">iPhone6s</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;Pricing of iPhone6s is $\(price2)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面還要再宣告新變數的方式會稍為有點麻煩，我們也可以使用索引(index)直接從tuple中取得值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;Pricing of iPhone6s \(iPhone6s.0) is $\(iPhone6s.1)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外也可以在一開始宣告tuple時就加上名稱</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">iPhone6s_plus</span> <span class="o">=</span> <span class="p">(</span><span class="nl">type</span><span class="p">:</span> <span class="s">&quot;16g&quot;</span><span class="p">,</span> <span class="nl">price</span><span class="p">:</span> <span class="mi">28500</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;Pricing of iPhone6s \(iPhone6s_plus.type) is $\(iPhone6s_plus.price)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Tuple可以快速的把多個值組成群組，這在暫時儲存幾個值的時後非常有用，但要用來儲存較複雜的資料結構就不是很適合，例如現在需要再新增一筆64g的iPhone6s就會非常難處理，判斷適合的情況來使用可以更有效的幫助你程式開發的效率。</p>

<h1>可選擇項(Optionals)</h1>

<blockquote><p>Optional並沒有很明確的翻譯，如有更佳的翻譯請不吝提供，謝謝</p></blockquote>

<p>Optional表示一個常數或變數的值可存在也可不存在(nil)，並且當值存在的時後就會執行，不存在就不執行，這對開發者來說是個非常棒的概念，可以很明確的知道這個常數或變數有沒有可能會有nil產生，就算產生了nil，也常常可以在不跳出錯誤的情況繼續執行下去，下面就來宣告一個optional variable</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">optionalVariable</span><span class="p">:</span> <span class="n">Int</span><span class="o">?</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;Optional variable = \(optionalVariable)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>宣告為optional需在型態後面加上<code>?</code>，當不給予初始值時，optionalVariable會自動被設定為nil，這時後印出optionalVariable可以看到值為nil</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">optionalVariable</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;Optional variable = \(optionalVariable)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>將10給予optionalVariable後再次印出，可看到印出的值為<code>Optional(10)</code>，這就表示值為optional，但這並不能直接使用，因為10這個數字是被包裝(wrapped)在optional裡，我們要取出值的話需要再使用<code>!</code>來解析(unwrapping)optional，明確表示我們需要取得這個值</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">if</span> <span class="n">optionalVariable</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;Optional variable = \(optionalVariable!)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上我們先用一個條件判斷式來確定optionalVariable並非nil，再使用!來取出optionaVariable的值</p>

<p>來看到另一個範例，這裡我想將一組字串轉換為數字，但我們可以想像的到並不是所有字串都可以轉換為數字，例如"123"可轉換為123，但想將"abc"轉換成數字時，會因為無法轉換而產生nil</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="n">possibleNumber</span> <span class="o">=</span> <span class="s">&quot;123&quot;</span>
</span><span class='line'><span class="k">let</span> <span class="n">convertedNumber</span> <span class="o">=</span> <span class="n">Int</span><span class="p">(</span><span class="n">possibleNumber</span><span class="p">)</span> <span class="c1">// convertedNumber is optional</span>
</span><span class='line'><span class="k">let</span> <span class="n">notNumber</span> <span class="o">=</span> <span class="n">Int</span><span class="p">(</span><span class="s">&quot;abc&quot;</span><span class="p">)</span> <span class="c1">// nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>由於possibleNumber在做轉換時可能產生nil，因此回傳的結果是optional，藉由型別推斷convertedNumber也是optional</p>

<h1>可選擇項繫結(Optional binding)</h1>

<p>在條件判斷式中如<code>if</code>、<code>while</code>等，我們可能會想先判斷說這個值存不存在，如果存在再來進行其它動作，這時後使用optional binding可以讓我們更快速的達成效果，以上面的範例來看，如果我們用一般的方式判斷</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">if</span> <span class="n">convertedNumber</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// possibleNumber可轉換成數字</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(possibleNumber) has an integer value of \(convertedNumber)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// possibleNumber不可轉換成數字</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(possibleNumber) could not be converted to an integer&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用optional binding時可以自動判斷這個optional是否存在值，存在的話就會執行，不存在就不執行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">actualNumber</span> <span class="o">=</span> <span class="n">Int</span><span class="p">(</span><span class="n">possibleNumber</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// possibleNumber可轉換成數字</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(possibleNumber) has an integer value of \(convertedNumber)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// possibleNumber不可轉換成數字</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(possibleNumber) could not be converted to an integer&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>optional binding還可以搭配where來達到更複雜的條件判斷，當字串"10"可以被轉換成數字時會儲存到smallNumber，"50"可被轉換成數字時存到bigNumber，而只要其中一個條件不成立整個判斷就不會執行，當兩組字串都可以被轉換時，再加上where來判斷說smallNumber確實小於bigNumber，整個條件判斷才算完整成立</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">if</span> <span class="k">let</span> <span class="n">smallNumber</span> <span class="o">=</span> <span class="n">Int</span><span class="p">(</span><span class="s">&quot;10&quot;</span><span class="p">),</span> <span class="n">bigNumber</span> <span class="o">=</span> <span class="n">Int</span><span class="p">(</span><span class="s">&quot;50&quot;</span><span class="p">)</span> <span class="k">where</span> <span class="n">smallNumber</span> <span class="o">&lt;</span> <span class="n">bigNumber</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(bigNumber) bigger than \(smallNumber)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>隱式解析可選擇項(Implicitly Unwrapped Optionals)</h1>

<p>有些時後我們可以很肯定的知道某些結果，例如我們可以很肯定"8"一定是數字，轉換時不可能會失敗，那我們可以省略上面範例的步驟，直接在型態後面加上<code>!</code>，這樣轉換完後的結果就會自動unwrapping，就不需要在每次加上!來解析，但需要注意的是如果結果還是產生了nil，那麼程式就會拋出錯誤，使用上要非常清楚程式執行的邏輯，不然應避免使用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">let</span> <span class="nl">currentNumber</span><span class="p">:</span> <span class="n">Int</span><span class="o">!</span> <span class="o">=</span> <span class="n">Int</span><span class="p">(</span><span class="s">&quot;8&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">print</span><span class="p">(</span><span class="s">&quot;current number is \(currentNumber)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress + Github 打造自已的Blog]]></title>
    <link href="http://zneuray.github.io/2016/01/07/octopress-plus-github-da-zao-zi-yi-de-blog/"/>
    <updated>2016-01-07T18:28:26+08:00</updated>
    <id>http://zneuray.github.io/2016/01/07/octopress-plus-github-da-zao-zi-yi-de-blog</id>
    <content type="html"><![CDATA[<h1>部落格誕生</h1>

<p>一直以來都沒有寫作的習慣，最近深刻的體會到任何事情當下都覺得這麼印象深刻，怎麼可能會忘記呢？結果只過了一個禮拜就想不起來…真的事情不寫下來非常容易忘記，因此起了念頭，把學習的心得都寫下來吧！也正好最近開始學習Swift，就找個部落格來記錄學習的心得。</p>

<!-- more -->


<p>因為想要記錄Swift的學習心得，需求的部份希望能支援Swift syntax highlighting，介面要簡潔，這樣就足夠了，於是尋找的過程中看了一些部落格，大部份拿來寫遊記、食記等的部落格就不提了，以下列出幾個我有考慮使用的Blog :</p>

<ul>
<li><a href="https://www.blogger.com">Blogger</a></li>
<li><a href="https://tw.wordpress.org/">WordPress</a></li>
<li><a href="https://github.com/tryghost/Ghost">Ghost</a></li>
<li><a href="http://logdown.com/">Logdown</a></li>
<li><a href="http://octopress.org/">Octopress</a></li>
</ul>


<p>最後我選擇了使用<strong>Octopress</strong>，下面來簡單介紹一下每個Blog</p>

<h3>Blogger</h3>

<p>這是Google自已的Blog，有Google帳號就可以登入使用，但介面與操作我不太喜歡，而且沒有能放code的區塊，要自已進html加上css與javascript才會有syntax highlighting的功能，非常不方便，所以沒有使用。</p>

<h3>WordPress</h3>

<p>一個open source的blog，功能非常強大，只要找一台Server就可架設，現在又有很多租用的Server都直接支援架設WordPress，WordPress自已本身也提供線上免費版，其實非常夠用了，原本打算就直接使用WordPress，但是發現免費版的目前並不支援Swift syntax highlighting(支援的語言請<a href="https://en.support.wordpress.com/code/posting-source-code/">參考</a>)，也無法安裝外掛，所以先擺著看看還有沒有其他的Blog。</p>

<h3>Ghost</h3>

<p>同樣是open source的blog，架構使用node.js，目的就是為了簡潔快速，畫面還滿漂亮，並且使用<strong>Markdown</strong>來編輯，當時有心動打算使用，但想到要找台nodejs的Server較麻煩，目前也不打算自已架Server，所以也先擺著。</p>

<blockquote><h4>Markdown簡介</h4>

<p><a href="http://markdown.tw/">Markdown</a>是一種易讀易寫的格式，用一些簡單的符號就可以進行整篇文章的排版，像現在看到的這篇文章就是使用Markdown格式寫成的，Markdown原本就支援code block，再加上Github以Markdown設計出<a href="https://help.github.com/articles/github-flavored-markdown/">GitHub Flavored Markdown</a>，支援了大部份語言的syntax highlighting，當初希望在記錄Swift學習心得時能有個漂亮的顏色顯示，所以選擇了有支援Markdown的Blog。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="k">var</span> <span class="nl">name</span><span class="p">:</span> <span class="n">String</span> <span class="o">=</span> <span class="s">&quot;Ray&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">func</span> <span class="n">sayHello</span><span class="p">(</span><span class="n">to</span> <span class="nl">person</span><span class="p">:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">print</span><span class="p">(</span><span class="s">&quot;Hello \(person)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">sayHello</span><span class="p">(</span><span class="nl">to</span><span class="p">:</span> <span class="n">name</span><span class="p">)</span> <span class="c1">// &quot;Hello Ray&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Logdown</h3>

<p>由XDite的團隊設計，目的就是要能方便貼code、貼圖等，專門設計給程式設計師的Blog，當時其實已經在安裝Octopress，過程中不小心看到的，試用了一下覺得還算不錯，同樣使用Markdown編輯，畫面清析簡單，也提供免費版，對程式設計師又不想自已架設Blog的人非常推薦使用。</p>

<h3>Octopress</h3>

<p>這就今天的主角，一個畫面功能簡潔，也同樣是以Markdown來編輯的Blog，並且搭配Github pages就可以架設，整個Blog也可自行修改客製，因此最後選擇了Octopress。</p>

<p>因為Octopress安裝架設會需要一點技術知識背景，也沒有提供後台管理，發佈文章更改設定等都需要自己手動修改產生，新手的話就需要多花點時間努力學習，懶人的話推薦去使用Logdown就非常好用了。</p>

<h1>開始安裝</h1>

<p>安裝大致上就參考官網所寫的<a href="http://octopress.org/docs/setup/">文件</a>
步驟為以下所列 :</p>

<ol>
<li>Github帳號並設定Github pages</li>
<li>Ruby與Javascript環境</li>
<li>安裝Octopress</li>
</ol>


<h3>Github</h3>

<p>先去<a href="https://github.com/">Github</a>辦個帳號，接著建立Github pages(<a href="https://pages.github.com/">官網</a>)，但不要照著官網做，我們只需要新增一個repository並取名為 :</p>

<p><strong><code>username.github.io</code></strong></p>

<p><strong>username</strong> 是你的帳號，全小寫就好，千萬不要跟著打username上去，像我的帳號是zneuray，就打<code>zneuray.github.io</code>，這也是你網站的位置，建好後你就擁有一個基本的網站了。</p>

<h3>Ruby</h3>

<p><code>OS X 10.11</code>內建就有<code>Ruby-2.0.0</code>，目前Octopress僅需要<code>1.9.3</code>以上的版本即可，可以直接略過這步</p>

<p>因為最新版本的<code>Ruby-2.3.0</code>，如果想更新的再照以下方式安裝，我的<code>Ruby</code>環境已經安裝好了，沒辦法再實際安裝一次，因此這邊就參考其他<a href="http://railsapps.github.io/installrubyonrails-mac.html">網站</a>安裝教學，簡單列一下更新步驟</p>

<p>安裝環境 : <code>OS X 10.11</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>1. 安裝homebrew
</span><span class='line'><span class="nv">$ </span>ruby -e <span class="s2">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span>
</span><span class='line'>
</span><span class='line'>2. 安裝gpg
</span><span class='line'><span class="nv">$ </span>brew install gpg
</span><span class='line'><span class="nv">$ </span><span class="nb">command </span>curl -sSL https://rvm.io/mpapis.asc <span class="p">|</span> gpg --import -
</span><span class='line'>
</span><span class='line'>3.1 安裝rvm
</span><span class='line'><span class="nv">$ </span><span class="se">\c</span>url -L https://get.rvm.io <span class="p">|</span> bash -s stable
</span><span class='line'><span class="nv">$ </span><span class="nb">source</span> ~/.rvm/scripts/rvm
</span><span class='line'>
</span><span class='line'>3.2 已經有安裝rvm的可以用以下指令取得最新版rvm
</span><span class='line'><span class="nv">$ </span>rvm get stable --autolibs<span class="o">=</span><span class="nb">enable</span>
</span><span class='line'>
</span><span class='line'>4. 安裝最新版ruby
</span><span class='line'><span class="nv">$ </span>rvm install ruby-2.3.0
</span></code></pre></td></tr></table></div></figure>


<h3>Octopress</h3>

<p>接下來就開始安裝Octopress，在console使用git將整個repository下載回來，最後面octopress為下載的資料夾，可自行更換</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone git://github.com/imathis/octopress.git octopress
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>另外推薦圖型化介面的git管理套件 <a href="https://www.sourcetreeapp.com/">SourceTree</a></p></blockquote>

<p>進入資料夾octopress</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>octopress
</span></code></pre></td></tr></table></div></figure>


<p>接下來要安裝相依套件，這部份是屬於<code>Ruby</code>環境建置的一部份，在這之前你應該先安裝好<code>Ruby</code>，<code>Ruby</code>的套件管理程式有<code>RVM</code>與<code>rbenv</code>，本篇文章以<code>RVM</code>為主</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gem install bundler
</span><span class='line'><span class="nv">$ </span>bundle install
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>如果使用rbenv記得要在每次執行<code>gem install</code>後使用<code>rbenv rehash</code>重新整理一次</p></blockquote>

<p>安裝Octopress，這邊的安裝其實就是安裝你的theme，後面沒加參數就是使用預設的theme，theme的部份後面會介紹，先讓我們安裝完</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake install
</span></code></pre></td></tr></table></div></figure>


<p>從這邊我們可以看到安裝就是從theme的資料夾中把source跟sass複製到你的Blog資料夾，source裡面就是如何產生你的Blog頁面資料，就是產生html部份，sass則是產生Blog樣式，也就是產生css，只要會修改這邊就可以自行設計樣式</p>

<blockquote><p>## Copying classic theme into ./source and ./sass<br/>
mkdir -p source<br/>
cp -r .themes/classic/source/. source<br/>
mkdir -p sass<br/>
cp -r .themes/classic/sass/. sass<br/>
mkdir -p source/_posts<br/>
mkdir -p public</p></blockquote>

<p>再來要設定Blog環境</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake setup_github_pages
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Enter the read/write url for your repository<br/>
(For example, &lsquo;git@github.com:your_username/your_username.github.io.git) or '<a href="https://github.com/your_username/your_username.github.io">https://github.com/your_username/your_username.github.io</a>&rsquo;)<br/>
Repository url:</p></blockquote>

<p>輸入你的Github pages網址，username記得要換成你的帳號</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>https://github.com/username/username.github.io
</span></code></pre></td></tr></table></div></figure>


<p>這裡會自動幫你把repository remote設到你輸入的github repository，並幫你新增一個branch叫<code>source</code>，未來檔案都在<code>source</code>這個branch修改，要發表新文章也同樣是在這</p>

<p>下一步就是產生網頁並發佈，<code>source</code>裡的檔案都是含程式碼的原始檔，包含新發表的Markdown文章也同樣是放在這邊，這一步就是把這些檔案全部轉成html放到<code>_deploy</code>資料夾中，並使用<code>deploy</code>指令幫你把<code>_deploy</code>資料夾中的檔案push到remote</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake generate
</span><span class='line'><span class="nv">$ </span>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>到這邊Octopress安裝就算完成了，可以看到目前會有2個branch，分別為<code>source</code>與<code>master</code>，之後都只要修改<code>source</code> branch就好，<code>master</code>交給rake來管理就好了，記得<code>source</code>有修改過的部份再<code>commit</code>上去就可以。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git add .
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s1">&#39;your message&#39;</span>
</span><span class='line'><span class="nv">$ </span>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<h1>目錄結構</h1>

<p>簡單列出幾個比較需要知道的目錄</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">octopress</span>
</span><span class='line'><span class="o">+--</span> <span class="o">.</span><span class="n">themes</span> <span class="c1">#theme都放這邊</span>
</span><span class='line'><span class="o">+--</span> <span class="n">_deploy</span> <span class="c1">#執行rake generate後產生的檔案放到這，也就是要上傳的完稿，使用rake deploy上傳至github pages</span>
</span><span class='line'><span class="o">+--</span> <span class="n">sass</span> <span class="c1">#Blog樣式</span>
</span><span class='line'><span class="o">+--</span> <span class="n">source</span>
</span><span class='line'><span class="o">|</span>  <span class="o">+--</span> <span class="n">_includes</span> <span class="c1">#其他附加的原始html</span>
</span><span class='line'><span class="o">|</span>  <span class="o">+--</span> <span class="n">_layouts</span> <span class="c1">#幾個主頁面的原始html</span>
</span><span class='line'><span class="o">|</span>  <span class="o">+--</span> <span class="n">_posts</span> <span class="c1">#文章存放的地方</span>
</span><span class='line'><span class="o">|</span>  <span class="o">+--</span> <span class="n">about</span> <span class="c1">#自我介紹存放的地方</span>
</span><span class='line'><span class="o">|</span>  <span class="o">+--</span> <span class="n">images</span> <span class="c1">#存放圖片的地方</span>
</span><span class='line'><span class="o">+--</span> <span class="n">_config</span><span class="o">.</span><span class="n">yml</span> <span class="c1">#Octopress主要的設定檔</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Blog設定</h1>

<p>首先我們需要來設定Blog的資訊，主要的設定都在<code>_config.yml</code>，這是<code>yaml</code>格式的檔案，基本格式就是<code>設定名稱: 設定值</code>，非常容易就可以修改，檔案中還有其他設定再依自已需求調整即可，這裡列出最基本的Blog資訊</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">url</span><span class="p-Indicator">:</span> <span class="s">&quot;http://zneuray.github.io&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="s">&quot;用嘴寫code&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">subtitle</span><span class="p-Indicator">:</span> <span class="s">&quot;說的一口好程式&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">author</span><span class="p-Indicator">:</span> <span class="s">&quot;Ray&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">simple_search</span><span class="p-Indicator">:</span> <span class="s">&quot;https://www.google.com/search&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">description</span><span class="p-Indicator">:</span> <span class="s">&quot;Android</span><span class="nv"> </span><span class="s">app</span><span class="nv"> </span><span class="s">/</span><span class="nv"> </span><span class="s">Ruby</span><span class="nv"> </span><span class="s">/</span><span class="nv"> </span><span class="s">Rails</span><span class="nv"> </span><span class="s">web</span><span class="nv"> </span><span class="s">developer&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h1>發表新文章</h1>

<p>發表新文章非常簡單，只要輸入以下指令，<code>title</code>輸入文章的標題就可以</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake new_post<span class="o">[</span><span class="s2">&quot;title&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>如果你使用的是zsh，因為[ ]在zsh中有另外的作用，所以這行指令會無法執行，要改用以下方式輸入</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake <span class="s2">&quot;new_post[title]&quot;</span>
</span><span class='line'>或
</span><span class='line'><span class="nv">$ </span>rake new_post<span class="se">\[</span><span class="s2">&quot;title&quot;</span><span class="se">\]</span>
</span></code></pre></td></tr></table></div></figure>


<p>執行完後會在<code>source/_posts/</code>底下產生一個新的檔案，格式是<code>年-月-日-標題.markdown</code>，這就是剛建立的新文章，直接用編輯器打開來編輯就可以了。</p>

<p>打開新建立的文章會看到裡面已經預先幫我們填好一些資訊</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="nn">---</span>
</span><span class='line'><span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="s">&quot;post&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="s">&quot;Octopress</span><span class="nv"> </span><span class="s">+</span><span class="nv"> </span><span class="s">Github</span><span class="nv"> </span><span class="s">打造自已的Blog&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">date</span><span class="p-Indicator">:</span> <span class="s">&quot;2016-01-07</span><span class="nv"> </span><span class="s">18:28:26</span><span class="nv"> </span><span class="s">+0800&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">comments</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'><span class="l-Scalar-Plain">categories</span><span class="p-Indicator">:</span> <span class="s">&quot;Octopress&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">published</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'><span class="nn">---</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>layout: 指定使用哪個layout，這裡寫<code>post</code>意思就是對應到<code>source/_layouts/post.html</code>這個layout</li>
<li>title: 文章標題</li>
<li>date: 文章日期</li>
<li>comments: 允不允許留言</li>
<li>categories: 會自動幫你產生文章分類</li>
<li>published: 如果不想發佈這篇文章時可設定成false</li>
</ul>


<p>編輯完的文章在Blog主頁面會直接看到整篇文章，如果文章多的話會造成整個主頁面非常的長，也不方便找文章，因此我們在文章寫完一段<code>前言</code>時加上一行語法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- more --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在這行語法後的文章就不會出現在主頁面，而會顯示一個<code>更多</code>的按鈕讓你點入觀看文章，這樣就可以整理好主頁的版面，這串語法是在<code>_config.yml</code>中設定的，如果發現語法沒效果請檢查你的<code>_config.yml</code>是否有做修改</p>

<h3>本篇文章編輯的範例</h3>

<p><img src="http://zneuray.github.io/images/blog/48cd89ea8b201ee0e5fd/5f88861b8fc71281dec0d33b481d2bd4b43c988f.png"></p>

<h3>預覽</h3>

<p>寫文章時我們當然想看一下目前編輯出來的文章到底長什麼樣子，<code>Octopress</code>也提供了預覽的指令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake preview
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Starting to watch source with Jekyll and Compass. Starting Rack on port 4000<br/>
[2016-01-07 23:28:45] INFO  WEBrick 1.3.1<br/>
[2016-01-07 23:28:45] INFO  ruby 2.2.1 (2015-02-26) [x86_64-darwin14]<br/>
[2016-01-07 23:28:45] INFO  WEBrick::HTTPServer#start: pid=39559 port=4000</p></blockquote>

<p>輸入指令後就我們就可以看到<code>Octopress</code>自動執行<code>rake generate</code>後幫我們啟動了一個<code>web server</code>並開啟<code>port 4000</code>讓我們可以連線進入，接下來打開你的瀏覽器並輸入網址<a href="http://127.0.0.1:4000">127.0.0.1:4000</a>，就可以預覽你目前的Blog，這個方式會佔用一個terminal，在預覽完後按<code>ctrl + c</code>關閉才可以繼續使用該terminal。</p>

<h3>pow</h3>

<p>另外推薦一個簡單的web server套件<a href="http://pow.cx/">pow</a>，在寫RoR時因為常常要預覽網頁，但每次都要啟動關閉server實在很麻煩，因此安裝<code>pow</code>，<code>pow</code>會根據目前專案的設定來啟動一個server，除非有更改到設定的部份才需要重啟，不然就從此放著不管他就可以了。</p>

<p>安裝<code>pow</code>非常簡單，只需要一行指令，就可以完成安裝</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>curl get.pow.cx <span class="p">|</span> sh
</span></code></pre></td></tr></table></div></figure>


<p>接下來設定你的專案，<code>/path/to/octopress</code>的部份換成你的Blog的路徑</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/.pow
</span><span class='line'><span class="nv">$ </span>ln -s /path/to/octopress octopress
</span></code></pre></td></tr></table></div></figure>


<p>完成後未來只要開啟<code>專案名.dev</code>的網址就可以看到你的Blog，如果專案名是octopress，那就開啟<a href="http://octopress.dev/">octopress.dev</a>網址，記得每次編輯完還是要下<code>rake generate</code>才會更新你的Blog</p>

<p>如果你使用<code>pow</code>的話，有一個<code>pow</code>的管理套件叫做<code>powder</code>，讓你可以更方便的管理<code>pow</code>，安裝的方式如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>gem install powder
</span></code></pre></td></tr></table></div></figure>


<p>安裝了<code>powder</code>後就不需要再使用上面的方式設定Blog，只要進入你的Blog資料夾輸入指令，就會自動幫你設定Blog</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>powder link
</span></code></pre></td></tr></table></div></figure>


<p>其他<code>powder</code>指令</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>powder start <span class="c">#啟動pow</span>
</span><span class='line'><span class="nv">$ </span>powder restart <span class="c">#重新啟動pow</span>
</span><span class='line'><span class="nv">$ </span>powder stop <span class="c">#停止pow</span>
</span><span class='line'><span class="nv">$ </span>powder unlink <span class="c">#解除專案連結</span>
</span><span class='line'><span class="nv">$ </span>powder open <span class="c">#自動使用瀏覽器開啟專案的網址</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Octopress theme</h3>

<p>Octopress theme的安裝非常簡單，在Octopress的<a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">Wiki</a>上已經收集了不少的theme，選擇你想要安裝的theme進入他的github，把theme使用git clone到你<code>.theme</code>的目錄再安裝就好了，每個theme也都有教你安裝方式，除了有些theme有另外增加新功能需要你去設定外，大致上都差不多</p>

<p>以本站來說，選擇的是<a href="https://github.com/bijumon/oct2">Oct2</a>這個theme，下面範例就使用這個theme來做安裝，選擇其他theme的記得要換掉網址，不要造著輸入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>git clone https://github.com/bijumon/oct2.git .themes/
</span><span class='line'><span class="nv">$ </span>rake install<span class="o">[</span><span class="s2">&quot;oct2&quot;</span><span class="o">]</span>
</span><span class='line'><span class="c"># 記得像zsh的話需要使用 rake &quot;install[oct2]&quot;</span>
</span><span class='line'><span class="nv">$ </span>rake generate
</span></code></pre></td></tr></table></div></figure>


<p>這樣我們就完成theme的安裝並產生新的Blog了，這邊可以下rake install[&ldquo;oct2&rdquo;]是因為我們把oct2的source放到<code>.theme</code>底下了，看一下<code>.theme</code>的資料夾發現裡面還有一個classic，這個就是原始octopress的theme，所以想換回來的話只要<code>rake install["classic"]</code>就可以了</p>

<h3>增加留言功能</h3>

<p>想要增加留言功能的話我們直接使用<code>Octopress</code>支援的<a href="https://disqus.com">Disqus</a>就好了，<code>Disqus</code>是一套整合的留言版管理系統，幫你整合各大社群登入與留言，安裝也非常快速簡單。</p>

<p>要在<code>Octopress</code>上使用<code>Disqus</code>，需要先到<code>Disqus</code>官網註冊一組帳號才行</p>

<ol>
<li>首先開啟文章支援留言的功能，在文章的最上方將<code>comments</code>設定為<code>true</code>，代表本篇文章開啟留言，不想開留言的文章設定為<code>false</code>即可</li>
<li>進入<a href="https://disqus.com">Disqus</a>註冊一個帳號</li>
<li>回到首頁看到右上角有個齒輪點擊選擇<code>Add Disqus To Site</code></li>
<li>按下Start Using Engage</li>
<li>輸入你的Blog網址並取一個唯一的名稱設定<code>Disqus</code>網址，你設定的這組唯一的名稱叫做<code>shortname</code>(不包含<code>.disqus.com</code>)，未來這組<code>shortname.disqus.com</code>就是你留言版的網址</li>
<li>回到Blog開啟<code>_config.yml</code>找到下面這一行填入你的shortname</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">disqus_short_name</span><span class="p-Indicator">:</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>重新產生Blog並發佈</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>rake generate
</span><span class='line'><span class="nv">$ </span>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>這樣你的Blog就新增了留言的功能</p>

<h1>恭喜</h1>

<p>順利安裝完<code>Octopress</code>後就代表你已經擁有一個自已的Blog了，現在我也是剛裝好<code>Octopress</code>開始使用，還有非常多的功能目前我也還沒使用到，未來在寫新文章的過程有用到新的功能時再更新上來吧。</p>
]]></content>
  </entry>
  
</feed>
